"use strict";!function(t,n){t.langs=["ru","en"],t.messages={ajax_fail:{ru:"Что-то пошло не так, перезагрузите страницу и попробуйте снова",en:"Something went wrong, reload the page and try again"},alert:{ru:"Уведомление",en:"Alert"}},t.ajax=!0,t.getLang=function(){var n=location.pathname,e=n.split("/");return e=e[1],t.in_array(e,t.langs)?e:t.langs[0]},t.getMessage=function(e){var a=t.getLang(),r=t.messages[e][a];return r!==n?r:""},t.addMessage=function(n){for(var e in n)t.messages[e]=n[e]},t.checkFileSize=function(t,n){try{n=n||5,t instanceof jQuery&&(t=t[0]);var e=t.files[0],a=e.size;return a<=1024*n*1024}catch(t){return!0}},t.imgload=function(t,n){var e=[];if(n=n||function(){},"string"==typeof t){var a=[];a.push(t),t=a}t instanceof jQuery?t.each(function(){var t=$(this),n=t.attr("src");""!=$.trim(n)&&e.push(n)}):t instanceof Array&&(e=t);var r=0,o=e.length;if(o)for(var i=0;i<o;i++){var u=new Image;u.onload=function(){++r==o&&n()},u.src=e[i]}else setTimeout(function(){n()},100)},t.alert=function(n,e,a){a=a||function(){},e=e||t.getMessage("alert");var r=300;$(".popup__title").html(e),$(".popup__msg").html(n),$(".popup").fadeIn(r),$(".popup__cross, .popup__bg").unbind("click").on("click",function(){$(".popup").fadeOut(r,function(){a()})})},t.get=function(e,a,r,o){r=r||"text",o=o||function(){alert(t.getMessage("ajax_fail"))},1==t.ajax&&(t.ajax=!1,$.get(e,function(e){t.ajax=!0,a!==n&&a(e)},r).fail(function(){t.ajax=!0,o!==n&&o()}))},t.post=function(e,a,r,o,i){o=o||"text",i=i||function(){alert(t.getMessage("ajax_fail"))},1==t.ajax&&(t.ajax=!1,$.post(e,a,function(e){t.ajax=!0,r!==n&&r(e)},o).fail(function(){t.ajax=!0,i!==n&&i()}))},t.scrollY=function(){return window.scrollY||document.documentElement.scrollTop},t.number_format=function(t,n,e,a){var r,o,i,u,c,f="";return t<0&&(f="-",t*=-1),isNaN(n=Math.abs(n))&&(n=0),e=e||".",a=a||" ",r=parseInt(t=(+t||0).toFixed(n))+"",(o=r.length)>3?o%=3:o=0,c=o?r.substr(0,o)+a:"",i=r.substr(o).replace(/(\d{3})(?=\d)/g,"$1"+a),u=n?e+Math.abs(t-r).toFixed(n).replace(/-/,0).slice(2):"",f+c+i+u},t.strip_tags=function(t,n){return n=n||"",t.replace(/<\/?[^>]+>/gi,n)},t.fmod=function(n,e){var a;a=t.count_char_after_dot(n)>t.count_char_after_dot(e)?t.count_char_after_dot(n):t.count_char_after_dot(e);var r=Math.pow(10,a);return n*=r,e*=r,(n-Math.floor(n/e)*e)/r},t.count_char_after_dot=function(t){for(var n=0;t-Math.floor(t)!=0;)n++,t*=10;return n},t.noScreening=function(t){if(t.length>0){var n=t.html();n=n.replace(new RegExp("&lt;","g"),"<").replace(new RegExp("&gt;","g"),">").replace(new RegExp("&amp;","g"),"&").replace(new RegExp("&quot;","g"),'"'),t.html(n)}},t.array_unique=function(t){for(var n={},e=0,a=t.length;e<a;e++)n[t[e]]=t[e];t=[];for(var e in n)t.push(e);return t},t.in_array=function(t,n,e){e=e||!1;for(var a=0,r=n.length;a<r;a++)if(0==e){if(n[a]==t)return!0}else if(n[a]===t)return!0;return!1},t.decl=function(n,e,a,r){var o={1:e,2:a,5:r};return o[t.getDeclNum(n)]},t.getDeclNum=function(t){var n=t%100,e=t%10;return n>10&&n<20?5:1==e?1:e>=2&&e<=4?2:5},t.getUrlVar=function(){var t=[],n=[],e={},a=location.search;if(""!=a){t=a.substr(1).split("&");for(var r=0;r<t.length;r++)n=t[r].split("="),e[n[0]]=n[1]}return e},t.getUrlHash=function(){var t=[],n=[],e={},a=location.hash;if(""!=a){t=a.substr(1).split("&");for(var r=0;r<t.length;r++)n=t[r].split("="),e[n[0]]=n[1]}return e},t.getUrl=function(t){var e=location.pathname.split("/");return e.shift(),t!==n?e[t]:e},t.parseInt=function(t){return parseInt(t,10)}}(window.my=window.my||{});
"use strict";function window_resize(){var i=$(window),w=$("body");window.ww=i.width(),window.wh=i.height(),$("#page-wrapper").css({minHeight:wh-parseInt(w.css("margin-top"),10)})}$(document).ready(function(){window_resize()}),$(window).resize(function(){window_resize()});
"use strict";jQuery.ajaxSetup({headers:{"X-CSRF-TOKEN":$('meta[name="csrf-token"]').attr("content")}}),$(document).ready(function(){var e=$("#shake_message");e.length&&e.modal("show"),$(".js_delete_confirm").on("click",function(){if(!confirm("Вы точно хотите удалить запись?"))return!1})});
"use strict";$(function(){$(".table__row_delete").on("click",function(){return!!confirm("Вы точно хотите удалить объект?")}),$(".table__check_all").on("click",function(){var e=$(this),t=$(".table__checkbox");e.is(":checked")?t.attr("checked","checked"):t.removeAttr("checked")}),$(".table__multi_delete").on("click",function(){var e=$(this),t=$(".table__checkbox:checked");if(0==t.length)my.alert("Нужно отметить хотябы один объект");else if(confirm("Вы точно хотите удалить выбранные объекты?")){var o=[];t.each(function(){o.push($(this).parents("tr:first").attr("data-id"))}),my.post(e.attr("data-route"),{objects:o},function(e){e.error?alert(e.error):t.each(function(){$(this).parents("tr:first").remove()})},"json")}return!1}),$(".table__row_eye").on("click",function(){var e=$(this),t=e.parents("tr:first");my.post(e.attr("data-route"),{objects:[t.attr("data-id")]},function(t){0==t.error&&(e.hasClass("glyphicon-eye-open")?e.removeClass("glyphicon-eye-open").addClass("glyphicon-eye-close"):e.removeClass("glyphicon-eye-close").addClass("glyphicon-eye-open"))},"json")}),$(".table__multi_active").on("click",function(){var e=$(this),t=$(".table__checkbox:checked");if(0==t.length)my.alert("Нужно отметить хотябы один объект");else{var o=[];t.each(function(){o.push($(this).parents("tr:first").attr("data-id"))}),my.post(e.attr("data-route"),{objects:o},function(e){0==e.error&&t.each(function(){var e=$(this).parents("tr:first").find(".table__row_eye");e.hasClass("glyphicon-eye-open")?e.removeClass("glyphicon-eye-open").addClass("glyphicon-eye-close"):e.removeClass("glyphicon-eye-close").addClass("glyphicon-eye-open")})},"json")}return!1}),$(".table__row").on("dblclick",function(e){var t=$(this),o=t.attr("data-edit");o&&(location.href=o)})});
"use strict";$(document).ready(function(){$(".dd").nestable({expandBtnHTML:'<button data-action="expand"><i class="fa fa-fw fa-plus"></i></button>',collapseBtnHTML:'<button data-action="collapse"><i class="fa fa-fw fa-minus"></i></button>',onEndEvent:function(){var t=$(this),a=t.attr("data-id"),e=t.parents("li:first"),n=t.prev(".dd-item"),i=0,o=0;e.length&&(i=e.attr("data-id"),$.cookie("admin_pages["+i+"]","1",{path:"/"})),n.length&&(o=n.attr("data-id")),$.post("/admin/pages/position",{id:a,parent_id:i,before_id:o},function(t){t.error&&alert(t.error.text)},"json")}}),$(".tree .eye_btn").on("click",function(t){t.preventDefault();var a=$(this),e=a.parents(".dd-item:first"),n=e.attr("data-id");$.post("/admin/pages/active",{objects:[n]},function(t){t.error?alert(t.error.text):a.hasClass("glyphicon-eye-open")?a.removeClass("glyphicon-eye-open").addClass("glyphicon-eye-close"):a.removeClass("glyphicon-eye-close").addClass("glyphicon-eye-open")},"json")}),$(".tree").on("click",'button[data-action="collapse"]',function(){var t=$(this),a=t.parents(".dd-item").attr("data-id");$.cookie("admin_pages["+a+"]","",{path:"/"})}),$(".tree").on("click",'button[data-action="expand"]',function(){var t=$(this),a=t.parents(".dd-item").attr("data-id");$.cookie("admin_pages["+a+"]","1",{path:"/"})});$.cookie("admin_pages")||[];$(".tree .dd-item").each(function(){var t=$(this),a=t.attr("data-id");if(!$.cookie("admin_pages["+a+"]")){var e=t.find('button[data-action="collapse"]:first');e.length&&e.click()}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
